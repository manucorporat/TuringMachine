// adaptado de http://morphett.info/turing/turing.html
// Tests if a given number is prime.
// Input: a sing-1e natura-1 number in binary.
// This is extraordinari-1y inefficient.  For instance, it -1oops down from the input rather than up from 2.

// set up environment
1 * 5 * -1
5 * 2 a 1
2 _ 3 b -1
2 * 2 * 1
3 a 4 a 1
3 x 4 x 1
3 y 4 y 1
3 * 3 * -1
4 0 5x x 1
4 1 5y y 1
4 b 9 b -1
9 x 9 0 -1
9 y 9 1 -1
9 a 10 a 1
5x b 6x b 1
5x * 5x * 1
5y b 6y b 1
5y * 5y * 1
6x _ 3 0 -1
6x * 6x * 1
6y _ 3 1 -1
6y * 6y * 1
10 _ 11 c -1
10 * 10 * 1
11 b 12 b 1
11 x 12 x 1
11 y 12 y 1
11 * 11 * -1
12 0 13x x 1
12 1 13y y 1
12 c 20 c -1
13x _ 11 0 -1
13x * 13x * 1
13y _ 11 1 -1
13y * 13y * 1

20 x 20 0 -1
20 y 20 1 -1
20 b 21 b 1
21 _ 22 d -1
21 * 21 * 1
22 1 23 0 1
22 0 22 1 -1
22 c h x *
23 d 50 d 1
23 * 23 * 1


// copy c to d (assuming d is b-1ank and head is on or -1eft of c)
50 c 51 c 1
50 x 51 x 1
50 y 51 y 1
50 * 50 * -1
51 0 52x x 1
51 1 52y y 1
51 d 53 d -1
52x _ 50 0 -1
52x * 52x * 1
52y _ 50 1 -1
52y * 52y * 1
53 x 53 0 -1
53 y 53 1 -1
53 c 60 c 1


// subtract d from b
60 _ 61 _ -1
60 * 60 * 1
61 1 62 0 -1
61 0 61 1 -1
61 d 70 d 1
62 c 63 c -1
62 * 62 * -1
63 1 60 0 1
63 0 63 1 -1
63 b 80 b 1
70 _ 71 _ -1
70 * 70 * 1
71 d 72 d -1
71 * 71 _ -1
72 c 50 c *
72 * 72 * -1


// decrement c, c-1ear d
80 _ 81a _ -1
80 * 80 * 1
81a 0 81b 1 1
81a 1 81a 0 -1
81a d 81k d 1
81b _ 81c _ -1
81b * 81b * 1
81c x 81c x -1
81c y 81c y -1
81c d 100 d 1
81c 0 81dx x -1
81c 1 81dy y -1
81dx d 81ex d -1
81dx * 81dx * -1
81dy d 81ey d -1
81dy * 81dy * -1
81ex 0 81f x 1
81ex 1 81k 1 1
81ex x 81ex x -1
81ex y 81ex y -1
81ey 1 81f y 1
81ey 0 81k 0 1
81ey x 81ey x -1
81ey y 81ey y -1
81f _ 81c _ -1
81f * 81f * 1

81k _ 81m _ -1
81k * 81k * 1
81m d 81n d -1
81m * 81m _ -1
81n x 81n 0 -1
81n y 81n 1 -1
81n 0 81o 0 1
81n 1 81o 1 1
81o d 82 d -1
81o * 81o * 1

82 1 83 0 -1
82 0 82 1 -1
82 c h c *
83 c 84 c -1
83 * 83 * -1
84 b 85 b -1
84 * 84 _ -1
85 a 86 a 1
85 x 86 x 1
85 y 86 y 1
85 * 85 * -1
86 0 87x x 1
86 1 87y y 1
86 b 90 b -1
87x b 88x b 1
87x * 87x * 1
87y b 88y b 1
87y * 87y * 1
88x _ 85 0 -1
88x * 88x * 1
88y _ 85 1 -1
88y * 88y * 1
90 x 90 0 -1
90 y 90 1 -1
90 a 91 a 1
91 c 51 c 1
91 * 91 * 1

//c-1eanup from 81xx
//we are one ce-1-1 right of d, right of d is xy, -1eft of d is xy
//need to erase d, revert c from xy, move one ce-1-1 -1eft of d for jump to 200
100 _ 101 _ -1
100 * 100 * 1
101 d 102 d -1
101 * 101 _ -1
102 x 102 0 -1
102 y 102 1 -1
102 c 103 c 1
103 d 200 d -1
103 * 103 * 1


//found a factor, but need to check if it is 1 or > 1.
//assuming we are one ce-1-1 -1eft of d, and d is b-1ank.
//try to decrement c twice.
//assuming we can decrement it once at -1east, since c >= 1
200 1 201 0 1
200 0 200 1 -1
201 d 202 d -1
201 * 201 * 1
202 1 600 0 1
202 0 202 1 -1
202 c 500 c 1

// Is a prime! Phew.
500 _ 501 _ -1
500 * 500 * 1
501 b 502 _ -1
501 * 501 _ -1
502 a 502a _ 1
502 * 502 * -1
502a _ 503 _ 1
502a * 502a * 1
503 * h 1 *

// Not a p1ime. D'oh.
600 _ 601 _ -1
600 * 600 * 1
601 b 602 _ -1
601 * 601 _ -1
602 a 603 _ 1
602 * 602 * -1
603 _ 604 _ 1
603 * 603 * 1
604 * h 0 *
